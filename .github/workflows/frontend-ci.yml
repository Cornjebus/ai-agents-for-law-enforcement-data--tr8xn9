name: Frontend CI

on:
  push:
    branches: [main, develop]
    paths: ['src/web/**']
  pull_request:
    branches: [main, develop]
    paths: ['src/web/**']

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8.x'
  NEXT_TELEMETRY_DISABLED: '1'
  HUSKY: '0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
            src/web/.next/cache
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: src/web
        run: pnpm install --frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Run ESLint
        working-directory: src/web
        run: pnpm lint
        
      - name: Run type checking
        working-directory: src/web
        run: pnpm type-check

      - name: Run unit tests
        working-directory: src/web
        run: pnpm test
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: Run component tests
        working-directory: src/web
        run: pnpm test:coverage
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: Check test coverage
        working-directory: src/web
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Test coverage ($COVERAGE%) is below threshold (80%)"
            exit 1
          fi

      - name: Build Next.js application
        working-directory: src/web
        run: pnpm build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: src/web/.next
          key: ${{ runner.os }}-nextjs-${{ github.sha }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run Snyk security scan
        uses: snyk/actions/node@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --fail-on=upgradable
          working-directory: src/web

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@v2.5.1
        with:
          project: 'frontend'
          path: 'src/web'
          format: 'HTML'
          args: >
            --failOnCVSS 7
            --enableRetired

      - name: Run SonarQube analysis
        uses: SonarSource/sonarqube-scan-action@v1.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=frontend
            -Dsonar.sources=src/web
            -Dsonar.tests=src/web/tests
            -Dsonar.typescript.lcov.reportPaths=src/web/coverage/lcov.info
            -Dsonar.coverage.exclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx
            -Dsonar.qualitygate.wait=true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            src/web/reports
            dependency-check-report.html
          retention-days: 30