name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/backend/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/backend/**'

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'
  PNPM_VERSION: '8.x'
  DOCKER_BUILDKIT: '1'
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  COVERAGE_THRESHOLD: 80

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: revenue_platform_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.0-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            ~/.cache/pip
          key: ${{ runner.os }}-deps-${{ hashFiles('**/pnpm-lock.yaml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        working-directory: src/backend
        run: |
          pnpm install
          python -m pip install -r requirements.txt
          python -m pip install -r requirements.dev.txt

      - name: Run ESLint
        working-directory: src/backend
        run: pnpm lint
        
      - name: Run Python linting
        working-directory: src/backend
        run: |
          pylint src/**/*.py
          black --check src/

      - name: Type checking
        working-directory: src/backend
        run: |
          pnpm exec tsc --noEmit
          mypy src/

      - name: Run unit tests
        working-directory: src/backend
        run: |
          pnpm test
          python -m pytest tests/unit

      - name: Run integration tests
        working-directory: src/backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/revenue_platform_test
          REDIS_URL: redis://localhost:6379
        run: |
          pnpm test:integration
          python -m pytest tests/integration

      - name: Generate coverage report
        working-directory: src/backend
        run: |
          pnpm test:coverage
          python -m pytest --cov --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./src/backend/coverage/coverage-final.json,./src/backend/coverage.xml
          fail_ci_if_error: true
          verbose: true

      - name: Build TypeScript
        working-directory: src/backend
        run: pnpm build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./src/backend
          push: false
          load: true
          tags: ${{ env.DOCKER_REGISTRY }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run Snyk security scan
        uses: snyk/actions/node@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check@v1.1.0
        with:
          project: 'backend'
          path: 'src/backend'
          format: 'HTML'
          out: 'reports'
          args: >
            --suppression suppression.xml
            --failOnCVSS 7
            --enableRetired

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@v0.10.0
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/backend:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            reports/
            trivy-results.txt
          retention-days: 30

  quality-gate:
    name: Quality Gate
    needs: [build, security]
    runs-on: ubuntu-latest
    steps:
      - name: Check build status
        run: |
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "Build job failed"
            exit 1
          fi

      - name: Check security scan status
        run: |
          if [ "${{ needs.security.result }}" != "success" ]; then
            echo "Security scan failed"
            exit 1
          fi